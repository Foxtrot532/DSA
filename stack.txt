#include<stdio.h>
#include<stdlib.h>
#include<math.h>
#define MS 50
char postfix[50];
struct stack
{	
int top;	
		int item[MS];
}s;
void push(int value)
{	
 		if(s.top==(MS-1))	
		{	
			printf("overflow\n");	
		}
		else
		{		
			s.item[++s.top]=value;	
		}
}
int pop()
{	
 		if(s.top==-1)
		{
			printf("\n stack underflow");
			exit(0);
		}
		return(s.item[s.top--]);
}
int empty()
{	
 		if(s.top==-1)	
		{		
			return 1;	
		}	
		else	
		{
			return 0;	
		}
}
 int operation(int a,int b,char c)
{	
 		switch(c)	
		{
			case '^':return(pow(a,b));
			case '*':return(a*b);
			case '%':return(a%b);
			case '/':return(a/b);
			case '+':return(a+b);
			case '-':return(a-b);
		}
}
int evaluate()
{	
	int i,a,b,ans,value;
	char symb;
	for(i=0;postfix[i]!='\0';i++)
	{
		symb=postfix[i];
		if((symb>='0')&&(symb<='9'))
		{
			push((int)(symb-'0'));
		}
		else
		{
			a=pop();
			b=pop();
			value=operation(b,a,symb);
			push(value);
		}
	}
	ans=pop();
	return ans;
}

void main()
{
		s.top=-1;
		int ans;
		printf("Enter the postfix expression\n");
		gets(postfix);
		ans=evaluate();
		printf("The resultant ans is %d\n",ans);
}
B. Procedure:

#include<stdio.h>
#include<stdlib.h>
#define MS 5
char infix[50],postfix[50],item;
void convert();
struct stack
{
int top;
		char item[MS];
}s;
void push(char value)
{
if(s.top==(MS-1))
		{
			printf("The stack is overflow\n");
			exit(0);
		}

		else
		{
				s.item[++s.top]=value;
		}
}
char pop()
{
if(s.top= =-1)
		{
			printf("stack underflow\n");
			exit(0);
		}
		return(s.item[s.top--]);
}
int empty()
{
if(s.top= = -1)
		{
			return 1;
		}
		else
		{
			return 0;
		}
}
int precedence(char c)
{
switch(c)
		{
			case '^':return 3;		
			case '*':
			case '/':
			case '%':return 2;
			case '+':
			case '-':return 1;
			case '(':return 0;		
		}
}
void main()
{
		s.top = -1;
		printf("Enter the infix expression :\n");
		gets(infix);
		convert();
		printf("The postfix expression is:\n");
		puts(postfix);
}
void convert()
{
int i,pos=0;
		char symb,t;
		for(i=0;infix[i]!='\0';i++)
		{
			symb=infix[i];
			switch(symb)
			{
				case '(':push(symb);
				break;
				case ')':while((t=pop())!='(')
				{
					postfix[pos++]=t;
				} 
				break;
				case '^':
				case '*':
				case '/':
				case '%':
				case '+':
case’-‘:         while((!empty())&&((precedence(s.item[s.top]))>=precedence(symb)))
					{
						postfix[pos++]=pop();
					}
					push(symb);
					break;
				  	default: postfix[pos++]=symb;
					break;
			}
		}
		while(!empty())
		{
			postfix[pos++]=pop();
		}
		postfix[pos]='\0';
}
